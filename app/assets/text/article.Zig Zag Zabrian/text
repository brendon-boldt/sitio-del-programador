Zig Zag Zabrian is a cheeky little program written for a Marist College hackathon; it didn't win—or place in the top three, for that matter—but writing it was worth every minute. This particular hackathon was interesting: it was not sponsored by any company or third part, it was simply a Marist College Computer Society event, and accordingly, the powers that were wanted to try something different. Thus they decided to make the aim of the hackathon non-existent—you could program whatever you want so long as you abided by two guidelines: you must program in one of two languages given to you (these were randomly selected from a pool consisting of languages such as Haskell, Ruby, Scala, Java, C++, etc.) and you must follow a set of source code rules. These rules were purposefully obnoxious including things such as committing twice per hour, no indentation, non-descriptive names, recursive functions, line length restrictions, and the list goes on.

So with our team of three having decided on using Ruby, we had to think of something to actually program. Considering we were somewhat miffed at the pointlessness of the hackathon, we all agreed to fight the authority and prove the flaws in the design of the event: we would break all of the rules without breaking any of them; on top of that, the program itself would do nothing.

Now the main source file [`z.rb`](https://github.com/kkoves/zig-zag-zabrian/blob/master/z.rb) had to abide by the rules, but there were no restrictions to using external API's; accordingly we wrote our own codebase which could loosely by called an API. So the main file did not have indents, descriptive variable names, or source comments, and including the mandatory three recursive functions consisted of just three lines of `def bkz a; if a then return 1 else bkz 0 end end`. But what the main source file did contain was a few hundred lines of:

> |"+ZYI!Z
> @s7Rj?nV
> tYm&NMve
> V7O0D$%C

What it was, in reality, was the encrypted source of another file. Now the encryption algorithm will not be replacing AES any time soon, but I thought it up myself and think it to be clever. Each line consists of eight printable characters; each character maps to either 1 or 0 depending on the parity of its ASCII code. The resulting 8-bit lines each correspond to one character of the encrypted source file; the decryption algorithm for this was only present in `z.rb`--keep this in mind as it is important later. Thus `z.rb` was the only visible file of our project and served as an decrypter and executor for the next file.

The encrypted file itself was Python script (breaking the language rule) aptly named `houdini.py` based on the fact that it would pull a third file from a separate repository ([Zip Zap Zabrian](https://github.com/kkoves/zip-zap-zabrian)) and execute it promptly before deleting itself. This last file, `zipzap.py` egregiously broke every rule we were given with excessive indentation, horribly descriptive variable names,and numerous line comments. After this file did nothing, for it merely printed a few lines of taunting text on the console, it proceeded to encrypt the original `z.rb`, delete the source of `z.rb`, and finally delete itself. The result was a single file, `z`, which was an encrypted version of `z.rb`--the only trouble was, the only copy of the decryption algorithm was contained inside of `z.rb` now `z`; the only decrypter was now encrypted accessible only by the decrypter (Catch 22 has nothing on this dilemma).

The project as a whole certainly amused our peers and the judges, yet in the end, we lost to a Twitter retweet bot on account of the fact that our project “didn't actually do anything”--I, for one, think that usefulness is overrated. I was not terribly disappointed in the loss as I believed the hackathon's design to be questionable, and the resulting jest of our project was infinitely worthwhile.

Post Script: The two commits per hour requirement was quite obnoxious considering that I and one of the other team members were to be gone most of the day at a ropes course. I accordingly wrote a bash script which committed function-less code every ten minutes. So if you see that I have over 100 commits in one day, that is why.
